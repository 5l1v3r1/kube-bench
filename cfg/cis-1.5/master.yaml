---
controls:
version: 1.15
id: 1
text: "Master Node Security Configuration"
type: "master"
groups:
- id: 1.1
  text: "Control Plane Components"
  checks:
  - id: 1.1.1
    text: "Ensure that the API server pod specification file permissions are set to 644 or more restrictive (Scored)"
    audit: "stat -c %a /etc/kubernetes/manifests/kube-apiserver.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml 
    scored: true

  - id: 1.1.2
    text: "Ensure that the API server pod specification file ownership is set to root:root (Scored)"
    audit: "stat -c %U:%G /etc/kubernetes/manifests/kube-apiserver.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown root:root /etc/kubernetes/manifests/kube-apiserver.yaml 
    scored: true

  - id: 1.1.3
    text: "Ensure that the controller manager pod specification file  permissions are set to 644 or more restrictive (Scored)"
    audit: "stat -c %a /etc/kubernetes/manifests/kube-controller-manager.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml 
    scored: true

  - id: 1.1.4
    text: "Ensure that the controller manager pod specification file ownership is set to root:root (Scored)"
    audit: "stat -c %U:%G /etc/kubernetes/manifests/kube-controller-manager.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
     Run the below command (based on the file location on your system) on the master node. 
     For example, 
     chown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml 
    scored: true
 
  - id: 1.1.5
    text: "Ensure that the scheduler pod specification file permissions are set to 644 or more restrictive (Scored)"
    audit: "stat -c %a /etc/kubernetes/manifests/kube-scheduler.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml 
    scored: true
 
  - id: 1.1.6
    text: "Ensure that the scheduler pod specification file ownership is set to root:root (Scored)"
    audit: "stat -c %U:%G /etc/kubernetes/manifests/kube-scheduler.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown root:root /etc/kubernetes/manifests/kube-scheduler.yaml 
    scored: true
 
  - id: 1.1.7
    text: "Ensure that the etcd pod specification file permissions are set to 644 or more restrictive (Scored)"
    audit: "stat -c %a /etc/kubernetes/manifests/etcd.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 /etc/kubernetes/manifests/etcd.yaml 
    scored: true
 
  - id: 1.1.8
    text: "Ensure that the etcd pod specification file ownership is set to root:root (Scored)"
    audit: "stat -c %U:%G /etc/kubernetes/manifests/etcd.yaml"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown root:root /etc/kubernetes/manifests/etcd.yaml 
    scored: true
 
  - id: 1.1.9
    text: "Ensure that the Container Network Interface file permissions are set to 644 or more restrictive (Not Scored)"
    audit: "stat -c %a <path/to/cni/files>"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 <path/to/cni/files> 
    scored: false
 
  - id: 1.1.10
    text: "Ensure that the Container Network Interface file ownership is set to root:root (Not Scored)"
    audit: "stat -c %U:%G <path/to/cni/files> "
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown root:root <path/to/cni/files> 
    scored: false
 
  - id: 1.1.11
    text: "Ensure that the etcd data directory permissions are set to 700 or more restrictive (Scored)"
    audit: "ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, stat -c %a /var/lib/etcd"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      On the etcd server node, get the etcd data directory, passed as an argument --data-dir, 
      from the below command: 
      ps -ef | grep etcd 
      Run the below command (based on the etcd data directory found above). For example, 
      chmod 700 /var/lib/etcd 
    scored: true
 
  - id: 1.1.12
    text: "Ensure that the etcd data directory ownership is set to etcd:etcd (Scored)"
    audit: "ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, stat -c %U:%G /var/lib/etcd"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      On the etcd server node, get the etcd data directory, passed as an argument --data-dir, 
      from the below command: 
      ps -ef | grep etcd 
      Run the below command (based on the etcd data directory found above). For example, 
      chown etcd:etcd /var/lib/etcd 
    scored: true
 
  - id: 1.1.13
    text: "Ensure that the admin.conf file permissions are set to 644 or more restrictive (Scored)"
    audit: "stat -c %a /etc/kubernetes/admin.conf"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 /etc/kubernetes/admin.conf 
    scored: true
 
  - id: 1.1.14
    text: "Ensure that the admin.conf file ownership is set to root:root (Scored)"
    audit: "stat -c %U:%G /etc/kubernetes/admin.conf"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown root:root /etc/kubernetes/admin.conf 
    scored: true
 
  - id: 1.1.15
    text: "Ensure that the scheduler.conf file permissions are set to 644 or more restrictive (Scored)"
    audit: "stat -c %a /etc/kubernetes/scheduler.conf"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 /etc/kubernetes/scheduler.conf 
    scored: true
 
  - id: 1.1.16
    text: "Ensure that the scheduler.conf file ownership is set to root:root (Scored)"
    audit: "stat -c %U:%G /etc/kubernetes/scheduler.conf"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown root:root /etc/kubernetes/scheduler.conf 
    scored: true
 
  - id: 1.1.17
    text: "Ensure that the controller-manager.conf file permissions are set to 644 or more restrictive (Scored)"
    audit: "stat -c %a /etc/kubernetes/controller-manager.conf"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod 644 /etc/kubernetes/controller-manager.conf 
    scored: true
 
  - id: 1.1.18
    text: "Ensure that the controller-manager.conf file ownership is set to root:root (Scored)"
    audit: "stat -c %U:%G /etc/kubernetes/controller-manager.conf"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown root:root /etc/kubernetes/controller-manager.conf 
    scored: true
 
  - id: 1.1.19
    text: "Ensure that the Kubernetes PKI directory and file ownership is set to root:root (Scored)"
    audit: "ls -laR /etc/kubernetes/pki/"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chown -R root:root /etc/kubernetes/pki/ 
    scored: true
 
  - id: 1.1.20
    text: "Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive (Scored)"
    audit: "ls -laR /etc/kubernetes/pki/*.crt"
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod -R 644 /etc/kubernetes/pki/*.crt 
    scored: true
 
  - id: 1.1.21
    text: "Ensure that the Kubernetes PKI key file permissions are set to 600 (Scored)"
    audit: "ls -laR /etc/kubernetes/pki/*.key "
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Run the below command (based on the file location on your system) on the master node. 
      For example, 
      chmod -R 600 /etc/kubernetes/pki/*.key 
    scored: true
 
- id: 1.2
  text: "API Server"
  checks:
  - id: 1.2.1
    text: "Ensure that the --anonymous-auth argument is set to false (Not Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --anonymous-auth argument is set to false."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and set the below parameter. 
      --anonymous-auth=false 
    scored: false
 
  - id: 1.2.2
    text: "Ensure that the --basic-auth-file argument is not set (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --basic-auth-file argument does not exist."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Follow the documentation and configure alternate mechanisms for authentication. Then, 
      edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and remove the --basic-auth-file=<filename> 
      parameter. 
    scored: true
 
  - id: 1.2.3
    text: "Ensure that the --token-auth-file parameter is not set (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --token-auth-file argument does not exist."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Follow the documentation and configure alternate mechanisms for authentication. Then, 
      edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and remove the --token-auth-file=<filename> 
      parameter. 
    scored: true
 
  - id: 1.2.4
    text: "Ensure that the --kubelet-https argument is set to true (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --kubelet-https argument either does not exist or is set to true."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and remove the --kubelet-https parameter. 
    scored: true
 
  - id: 1.2.5
    text: "Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --kubelet-client-certificate and --kubelet-client-key arguments exist and they are set as appropriate."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Follow the Kubernetes documentation and set up the TLS connection between the 
      apiserver and kubelets. Then, edit API server pod specification file 
      /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the 
      kubelet client certificate and key parameters as below. 
      --kubelet-client-certificate=<path/to/client-certificate-file> 
      --kubelet-client-key=<path/to/client-key-file> 
    scored: true
 
  - id: 1.2.6
    text: "Ensure that the --kubelet-certificate-authority argument is set as appropriate (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --kubelet-certificate-authority argument exists and is set as appropriate."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Follow the Kubernetes documentation and setup the TLS connection between the apiserver 
      and kubelets. Then, edit the API server pod specification file 
      /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the --
      kubelet-certificate-authority parameter to the path to the cert file for the certificate 
      authority. 
      --kubelet-certificate-authority=<ca-string> 
    scored: true
 
  - id: 1.2.7
    text: "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --authorization-mode argument exists and is not set to AlwaysAllow."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and set the --authorization-mode parameter to 
      values other than AlwaysAllow. One such example could be as below. 
      --authorization-mode=RBAC 
    scored: true
 
  - id: 1.2.8
    text: "Ensure that the --authorization-mode argument includes Node (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --authorization-mode argument exists and is set to a value to include Node."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and set the --authorization-mode parameter to a 
      value that includes Node. 
      --authorization-mode=Node,RBAC 
    scored: true
 
  - id: 1.2.9
    text: "Ensure that the --authorization-mode argument includes RBAC (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --authorization-mode argument exists and is set to a value to include RBAC."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and set the --authorization-mode parameter to a 
      value that includes RBAC, for example: 
      --authorization-mode=Node,RBAC 
    scored: true
 
  - id: 1.2.10
    text: "Ensure that the admission control plugin EventRateLimit is set (Not Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --enable-admission-plugins argument is set to a value that includes EventRateLimit."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Follow the Kubernetes documentation and set the desired limits in a configuration file. 
      Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml and set the below parameters. 
      --enable-admission-plugins=...,EventRateLimit,... 
      --admission-control-config-file=<path/to/configuration/file> 
    scored: false
 
  - id: 1.2.11
    text: "Ensure that the admission control plugin AlwaysAdmit is not set (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that if the --enable-admission-plugins argument is set, its value does not include AlwaysAdmit."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and either remove the --enable-admission-plugins 
      parameter, or set it to a value that does not include AlwaysAdmit. 
    scored: true
 
  - id: 1.2.12
    text: "Ensure that the admission control plugin AlwaysPullImages is set (Not Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --enable-admission-plugins argument is set to a value that includes AlwaysPullImages."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and set the --enable-admission-plugins parameter 
      to include AlwaysPullImages. 
      --enable-admission-plugins=...,AlwaysPullImages,... 
    scored: false
 
  - id: 1.2.13
    text: "Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used (Not Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --enable-admission-plugins argument is set to a value that includes SecurityContextDeny, if PodSecurityPolicy is not included."
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and set the --enable-admission-plugins parameter 
      to include SecurityContextDeny, unless PodSecurityPolicy is already in place. 
      --enable-admission-plugins=...,SecurityContextDeny,... 
    scored: false
 
  - id: 1.2.14
    text: "Ensure that the admission control plugin ServiceAccount is set (Scored)"
    audit: "ps -ef | grep kube-apiserver Verify that the --disable-admission-plugins argument is set to a value that does not includes ServiceAccount. "
    tests:
      test_items:
      - flag: "--anonymous-auth"
        compare:
          op: eq
          value: false
        set: true
    remediation: |
      Follow the documentation and create ServiceAccount objects as per your environment. 
      Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-
      apiserver.yaml on the master node and ensure that the --disable-admission-plugins 
      parameter is set to a value that does not include ServiceAccount. 
    scored: false
 
 
1.2.15 Ensure that the admission control plugin NamespaceLifecycle is 
set (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Reject creating objects in a namespace that is undergoing termination. 
Rationale: 
Setting admission control policy to NamespaceLifecycle ensures that objects cannot be 
created in non-existent namespaces, and that namespaces undergoing termination are not 
used for creating the new objects. This is recommended to enforce the integrity of the 
namespace termination process and also for the availability of the newer objects. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --disable-admission-plugins argument is set to a value that does not 
include NamespaceLifecycle. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --disable-admission-plugins parameter 
to ensure it does not include NamespaceLifecycle. 
Impact: 
None 
Default Value: 
By default, NamespaceLifecycle is set. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://kubernetes.io/docs/admin/admission-controllers/#namespacelifecycle 
88 | P a g e  
 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
89 | P a g e  
 
1.2.16 Ensure that the admission control plugin PodSecurityPolicy is set 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Reject creating pods that do not match Pod Security Policies. 
Rationale: 
A Pod Security Policy is a cluster-level resource that controls the actions that a pod can 
perform and what it has the ability to access. The PodSecurityPolicy objects define a set of 
conditions that a pod must run with in order to be accepted into the system. Pod Security 
Policies are comprised of settings and strategies that control the security features a pod has 
access to and hence this must be used to control pod access permissions. 
Note: When the PodSecurityPolicy admission plugin is in use, there needs to be at least one 
PodSecurityPolicy in place for ANY pods to be admitted. See section 1.7 for 
recommendations on PodSecurityPolicy settings. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --enable-admission-plugins argument is set to a value that includes 
PodSecurityPolicy. 
Remediation: 
Follow the documentation and create Pod Security Policy objects as per your environment. 
Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --enable-admission-plugins parameter 
to a value that includes PodSecurityPolicy: 
--enable-admission-plugins=...,PodSecurityPolicy,... 
Then restart the API Server. 
 
90 | P a g e  
 
Impact: 
The policy objects must be created and granted before pod creation would be allowed. 
Default Value: 
By default, PodSecurityPolicy is not set. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://kubernetes.io/docs/admin/admission-controllers/#podsecuritypolicy 
3. https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-
security-policies 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
91 | P a g e  
 
1.2.17 Ensure that the admission control plugin NodeRestriction is set 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Limit the Node and Pod objects that a kubelet could modify. 
Rationale: 
Using the NodeRestriction plug-in ensures that the kubelet is restricted to the Node and 
Pod objects that it could modify as defined. Such kubelets will only be allowed to modify 
their own Node API object, and only modify Pod API objects that are bound to their node. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --enable-admission-plugins argument is set to a value that includes 
NodeRestriction. 
Remediation: 
Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets. 
Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --enable-admission-plugins parameter 
to a value that includes NodeRestriction. 
--enable-admission-plugins=...,NodeRestriction,... 
Impact: 
None 
Default Value: 
By default, NodeRestriction is not set. 
 
92 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://kubernetes.io/docs/admin/admission-controllers/#noderestriction 
3. https://kubernetes.io/docs/admin/authorization/node/ 
4. https://acotten.com/post/kube17-security 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
93 | P a g e  
 
1.2.18 Ensure that the --insecure-bind-address argument is not set 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Do not bind the insecure API service. 
Rationale: 
If you bind the apiserver to an insecure address, basically anyone who could connect to it 
over the insecure port, would have unauthenticated and unencrypted access to your 
master node. The apiserver doesn't do any authentication checking for insecure binds and 
traffic to the Insecure API port is not encrpyted, allowing attackers to potentially read 
sensitive data in transit. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --insecure-bind-address argument does not exist. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and remove the --insecure-bind-address 
parameter. 
Impact: 
Connections to the API server will require valid authentication credentials. 
Default Value: 
By default, the insecure bind address is not set. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
94 | P a g e  
 
CIS Controls: 
Version 6 
 9.1 Limit Open Ports, Protocols, and Services 
 Ensure that only ports, protocols, and services with validated business needs are running 
on each system. 
Version 7 
 9.2 Ensure Only Approved Ports, Protocols and Services Are Running 
 Ensure that only network ports, protocols, and services listening on a system with 
validated business needs, are running on each system. 
95 | P a g e  
 
1.2.19 Ensure that the --insecure-port argument is set to 0 (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Do not bind to insecure port. 
Rationale: 
Setting up the apiserver to serve on an insecure port would allow unauthenticated and 
unencrypted access to your master node. This would allow attackers who could access this 
port, to easily take control of the cluster. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --insecure-port argument is set to 0. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the below parameter. 
--insecure-port=0 
Impact: 
All components that use the API must connect via the secured port, authenticate 
themselves, and be authorized to use the API. 
This includes: 
 kube-controller-manager 
 kube-proxy 
 kube-scheduler 
 kubelets 
Default Value: 
By default, the insecure port is set to 8080. 
96 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
CIS Controls: 
Version 6 
 9.1 Limit Open Ports, Protocols, and Services 
 Ensure that only ports, protocols, and services with validated business needs are running 
on each system. 
Version 7 
 9.2 Ensure Only Approved Ports, Protocols and Services Are Running 
 Ensure that only network ports, protocols, and services listening on a system with 
validated business needs, are running on each system. 
97 | P a g e  
 
1.2.20 Ensure that the --secure-port argument is not set to 0 (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Do not disable the secure port. 
Rationale: 
The secure port is used to serve https with authentication and authorization. If you disable 
it, no https traffic is served and all traffic is served unencrypted. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --secure-port argument is either not set or is set to an integer value 
between 1 and 65535. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and either remove the --secure-port parameter or 
set it to a different (non-zero) desired port. 
Impact: 
You need to set the API Server up with the right TLS certificates. 
Default Value: 
By default, port 6443 is used as the secure port. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
 
 
98 | P a g e  
 
CIS Controls: 
Version 6 
 14.2 Encrypt All Sensitive Information Over Less-trusted Networks 
 All communication of sensitive information over less-trusted networks should be 
encrypted. Whenever information flows over a network with a lower trust level, the 
information should be encrypted. 
Version 7 
 14.4 Encrypt All Sensitive Information in Transit 
 Encrypt all sensitive information in transit. 
99 | P a g e  
 
1.2.21 Ensure that the --profiling argument is set to false (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Disable profiling, if not needed. 
Rationale: 
Profiling allows for the identification of specific performance bottlenecks. It generates a 
significant amount of program data that could potentially be exploited to uncover system 
and program details. If you are not experiencing any bottlenecks and do not need the 
profiler for troubleshooting purposes, it is recommended to turn it off to reduce the 
potential attack surface. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --profiling argument is set to false. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the below parameter. 
--profiling=false 
Impact: 
Profiling information would not be available. 
Default Value: 
By default, profiling is enabled. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi
ling.md 
100 | P a g e  
 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
101 | P a g e  
 
1.2.22 Ensure that the --audit-log-path argument is set (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Enable auditing on the Kubernetes API Server and set the desired audit log path. 
Rationale: 
Auditing the Kubernetes API Server provides a security-relevant chronological set of 
records documenting the sequence of activities that have affected system by individual 
users, administrators or other components of the system. Even though currently, 
Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by 
setting an appropriate audit log path. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --audit-log-path argument is set as appropriate. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --audit-log-path parameter to a suitable 
path and file where you would like audit logs to be written, for example: 
--audit-log-path=/var/log/apiserver/audit.log 
Impact: 
None 
Default Value: 
By default, auditing is not enabled. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
102 | P a g e  
 
2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 
3. https://github.com/kubernetes/features/issues/22 
CIS Controls: 
Version 6 
 6.2 Ensure Audit Log Settings Support Appropriate Log Entry Formatting 
 Validate audit log settings for each hardware device and the software installed on it, 
ensuring that logs include a date, timestamp, source addresses, destination addresses, and 
various other useful elements of each packet and/or transaction. Systems should record 
logs in a standardized format such as syslog entries or those outlined by the Common Event 
Expression initiative. If systems cannot generate logs in a standardized format, log 
normalization tools can be deployed to convert logs into such a format. 
Version 7 
 6.2 Activate audit logging 
 Ensure that local logging has been enabled on all systems and networking devices. 
 6.3 Enable Detailed Logging 
 Enable system logging to include detailed information such as an event source, date, 
user, timestamp, source addresses, destination addresses, and other useful elements. 
103 | P a g e  
 
1.2.23 Ensure that the --audit-log-maxage argument is set to 30 or as 
appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Retain the logs for at least 30 days or as appropriate. 
Rationale: 
Retaining logs for at least 30 days ensures that you can go back in time and investigate or 
correlate any events. Set your audit log retention period to 30 days or as per your business 
requirements. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --audit-log-maxage argument is set to 30 or as appropriate. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --audit-log-maxage parameter to 30 or 
as an appropriate number of days: 
--audit-log-maxage=30 
Impact: 
None 
Default Value: 
By default, auditing is not enabled. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 
104 | P a g e  
 
3. https://github.com/kubernetes/features/issues/22 
CIS Controls: 
Version 6 
 6.3 Ensure Audit Logging Systems Are Not Subject To Loss (i.e. rotation/archive) 
 Ensure that all systems that store logs have adequate storage space for the logs 
generated on a regular basis, so that log files will not fill up between log rotation intervals. 
The logs must be archived and digitally signed on a periodic basis. 
Version 7 
 6.4 Ensure adequate storage for logs 
 Ensure that all systems that store logs have adequate storage space for the logs 
generated. 
105 | P a g e  
 
1.2.24 Ensure that the --audit-log-maxbackup argument is set to 10 or 
as appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Retain 10 or an appropriate number of old log files. 
Rationale: 
Kubernetes automatically rotates the log files. Retaining old log files ensures that you 
would have sufficient log data available for carrying out any investigation or correlation. 
For example, if you have set file size of 100 MB and the number of old log files to keep as 
10, you would approximate have 1 GB of log data that you could potentially use for your 
analysis. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --audit-log-maxbackup argument is set to 10 or as appropriate. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --audit-log-maxbackup parameter to 10 
or to an appropriate value. 
--audit-log-maxbackup=10 
Impact: 
None 
Default Value: 
By default, auditing is not enabled. 
 
106 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 
3. https://github.com/kubernetes/features/issues/22 
CIS Controls: 
Version 6 
 6.3 Ensure Audit Logging Systems Are Not Subject To Loss (i.e. rotation/archive) 
 Ensure that all systems that store logs have adequate storage space for the logs 
generated on a regular basis, so that log files will not fill up between log rotation intervals. 
The logs must be archived and digitally signed on a periodic basis. 
Version 7 
 6.4 Ensure adequate storage for logs 
 Ensure that all systems that store logs have adequate storage space for the logs 
generated. 
107 | P a g e  
 
1.2.25 Ensure that the --audit-log-maxsize argument is set to 100 or as 
appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Rotate log files on reaching 100 MB or as appropriate. 
Rationale: 
Kubernetes automatically rotates the log files. Retaining old log files ensures that you 
would have sufficient log data available for carrying out any investigation or correlation. If 
you have set file size of 100 MB and the number of old log files to keep as 10, you would 
approximate have 1 GB of log data that you could potentially use for your analysis. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --audit-log-maxsize argument is set to 100 or as appropriate. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --audit-log-maxsize parameter to an 
appropriate size in MB. For example, to set it as 100 MB: 
--audit-log-maxsize=100 
Impact: 
None 
Default Value: 
By default, auditing is not enabled. 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
108 | P a g e  
 
2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 
3. https://github.com/kubernetes/features/issues/22 
CIS Controls: 
Version 6 
 6.3 Ensure Audit Logging Systems Are Not Subject To Loss (i.e. rotation/archive) 
 Ensure that all systems that store logs have adequate storage space for the logs 
generated on a regular basis, so that log files will not fill up between log rotation intervals. 
The logs must be archived and digitally signed on a periodic basis. 
Version 7 
 6.4 Ensure adequate storage for logs 
 Ensure that all systems that store logs have adequate storage space for the logs 
generated. 
109 | P a g e  
 
1.2.26 Ensure that the --request-timeout argument is set as appropriate 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Set global request timeout for API server requests as appropriate. 
Rationale: 
Setting global request timeout allows extending the API server request timeout limit to a 
duration appropriate to the user's connection speed. By default, it is set to 60 seconds 
which might be problematic on slower connections making cluster resources inaccessible 
once the data volume for requests exceeds what can be transmitted in 60 seconds. But, 
setting this timeout limit to be too large can exhaust the API server resources making it 
prone to Denial-of-Service attack. Hence, it is recommended to set this limit as appropriate 
and change the default limit of 60 seconds only if needed. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --request-timeout argument is either not set or set to an appropriate 
value. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml and set the below parameter as appropriate and if needed. For example, 
--request-timeout=300s 
Impact: 
None 
Default Value: 
By default, --request-timeout is set to 60 seconds. 
110 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://github.com/kubernetes/kubernetes/pull/51415 
CIS Controls: 
Version 6 
 14.6 Enforce Detailed Audit Logging For Sensitive Information 
 Enforce detailed audit logging for access to nonpublic data and special authentication for 
sensitive data. 
Version 7 
 14.9 Enforce Detail Logging for Access or Changes to Sensitive Data 
 Enforce detailed audit logging for access to sensitive data or changes to sensitive data 
(utilizing tools such as File Integrity Monitoring or Security Information and Event 
Monitoring). 
111 | P a g e  
 
1.2.27 Ensure that the --service-account-lookup argument is set to true 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Validate service account before validating token. 
Rationale: 
If --service-account-lookup is not enabled, the apiserver only verifies that the 
authentication token is valid, and does not validate that the service account token 
mentioned in the request is actually present in etcd. This allows using a service account 
token even after the corresponding service account is deleted. This is an example of time of 
check to time of use security issue. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that if the --service-account-lookup argument exists it is set to true. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the below parameter. 
--service-account-lookup=true 
Alternatively, you can delete the --service-account-lookup parameter from this file so 
that the default takes effect. 
Impact: 
None 
Default Value: 
By default, --service-account-lookup argument is set to true. 
112 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://github.com/kubernetes/kubernetes/issues/24167 
3. https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use 
CIS Controls: 
Version 6 
 16 Account Monitoring and Control 
 Account Monitoring and Control 
113 | P a g e  
 
1.2.28 Ensure that the --service-account-key-file argument is set as 
appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Explicitly set a service account public key file for service accounts on the apiserver. 
Rationale: 
By default, if no --service-account-key-file is specified to the apiserver, it uses the 
private key from the TLS serving certificate to verify service account tokens. To ensure that 
the keys for service account tokens could be rotated as needed, a separate public/private 
key pair should be used for signing service account tokens. Hence, the public key should be 
specified to the apiserver with --service-account-key-file. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --service-account-key-file argument exists and is set as appropriate. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the --service-account-key-file parameter 
to the public key file for service accounts: 
--service-account-key-file=<filename> 
Impact: 
The corresponding private key must be provided to the controller manager. You would 
need to securely maintain the key file and rotate the keys based on your organization's key 
rotation policy. 
Default Value: 
By default, --service-account-key-file argument is not set. 
114 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://github.com/kubernetes/kubernetes/issues/24167 
CIS Controls: 
Version 6 
 3 Secure Configurations for Hardware and Software on Mobile Devices, Laptops, 
Workstations, and Servers 
 Secure Configurations for Hardware and Software on Mobile Devices, Laptops, 
Workstations, and Servers 
115 | P a g e  
 
1.2.29 Ensure that the --etcd-certfile and --etcd-keyfile arguments are 
set as appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
etcd should be configured to make use of TLS encryption for client connections. 
Rationale: 
etcd is a highly-available key value store used by Kubernetes deployments for persistent 
storage of all of its REST API objects. These objects are sensitive in nature and should be 
protected by client authentication. This requires the API server to identify itself to the etcd 
server using a client certificate and key. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --etcd-certfile and --etcd-keyfile arguments exist and they are set as 
appropriate. 
Remediation: 
Follow the Kubernetes documentation and set up the TLS connection between the 
apiserver and etcd. Then, edit the API server pod specification file 
/etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the etcd 
certificate and key file parameters. 
--etcd-certfile=<path/to/client-certificate-file>  
--etcd-keyfile=<path/to/client-key-file> 
Impact: 
TLS and client certificate authentication must be configured for etcd. 
Default Value: 
By default, --etcd-certfile and --etcd-keyfile arguments are not set 
116 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://coreos.com/etcd/docs/latest/op-guide/security.html 
CIS Controls: 
Version 6 
 9 Limitation and Control of Network Ports, Protocols, and Services 
 Limitation and Control of Network Ports, Protocols, and Services 
117 | P a g e  
 
1.2.30 Ensure that the --tls-cert-file and --tls-private-key-file arguments 
are set as appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Setup TLS connection on the API server. 
Rationale: 
API server communication contains sensitive parameters that should remain encrypted in 
transit. Configure the API server to serve only HTTPS traffic. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --tls-cert-file and --tls-private-key-file arguments exist and they 
are set as appropriate. 
Remediation: 
Follow the Kubernetes documentation and set up the TLS connection on the apiserver. 
Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the TLS certificate and private key file 
parameters. 
--tls-cert-file=<path/to/tls-certificate-file>  
--tls-private-key-file=<path/to/tls-key-file> 
Impact: 
TLS and client certificate authentication must be configured for your Kubernetes cluster 
deployment. 
Default Value: 
By default, --tls-cert-file and --tls-private-key-file arguments are not set. 
 
118 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 
3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide 
CIS Controls: 
Version 6 
 14.2 Encrypt All Sensitive Information Over Less-trusted Networks 
 All communication of sensitive information over less-trusted networks should be 
encrypted. Whenever information flows over a network with a lower trust level, the 
information should be encrypted. 
Version 7 
 14.4 Encrypt All Sensitive Information in Transit 
 Encrypt all sensitive information in transit. 
119 | P a g e  
 
1.2.31 Ensure that the --client-ca-file argument is set as appropriate 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Setup TLS connection on the API server. 
Rationale: 
API server communication contains sensitive parameters that should remain encrypted in 
transit. Configure the API server to serve only HTTPS traffic. If --client-ca-file 
argument is set, any request presenting a client certificate signed by one of the authorities 
in the client-ca-file is authenticated with an identity corresponding to the 
CommonName of the client certificate. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --client-ca-file argument exists and it is set as appropriate. 
Remediation: 
Follow the Kubernetes documentation and set up the TLS connection on the apiserver. 
Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-
apiserver.yaml on the master node and set the client certificate authority file. 
--client-ca-file=<path/to/client-ca-file> 
Impact: 
TLS and client certificate authentication must be configured for your Kubernetes cluster 
deployment. 
Default Value: 
By default, --client-ca-file argument is not set. 
 
120 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 
3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide 
CIS Controls: 
Version 6 
 14.2 Encrypt All Sensitive Information Over Less-trusted Networks 
 All communication of sensitive information over less-trusted networks should be 
encrypted. Whenever information flows over a network with a lower trust level, the 
information should be encrypted. 
Version 7 
 14.4 Encrypt All Sensitive Information in Transit 
 Encrypt all sensitive information in transit. 
121 | P a g e  
 
1.2.32 Ensure that the --etcd-cafile argument is set as appropriate 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
etcd should be configured to make use of TLS encryption for client connections. 
Rationale: 
etcd is a highly-available key value store used by Kubernetes deployments for persistent 
storage of all of its REST API objects. These objects are sensitive in nature and should be 
protected by client authentication. This requires the API server to identify itself to the etcd 
server using a SSL Certificate Authority file. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --etcd-cafile argument exists and it is set as appropriate. 
Remediation: 
Follow the Kubernetes documentation and set up the TLS connection between the 
apiserver and etcd. Then, edit the API server pod specification file 
/etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the etcd 
certificate authority file parameter. 
--etcd-cafile=<path/to/ca-file> 
Impact: 
TLS and client certificate authentication must be configured for etcd. 
Default Value: 
By default, --etcd-cafile is not set. 
 
122 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-apiserver/ 
2. https://coreos.com/etcd/docs/latest/op-guide/security.html 
CIS Controls: 
Version 6 
 14.2 Encrypt All Sensitive Information Over Less-trusted Networks 
 All communication of sensitive information over less-trusted networks should be 
encrypted. Whenever information flows over a network with a lower trust level, the 
information should be encrypted. 
Version 7 
 14.4 Encrypt All Sensitive Information in Transit 
 Encrypt all sensitive information in transit. 
123 | P a g e  
 
1.2.33 Ensure that the --encryption-provider-config argument is set as 
appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Encrypt etcd key-value store. 
Rationale: 
etcd is a highly available key-value store used by Kubernetes deployments for persistent 
storage of all of its REST API objects. These objects are sensitive in nature and should be 
encrypted at rest to avoid any disclosures. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --encryption-provider-config argument is set to a EncryptionConfig file. 
Additionally, ensure that the EncryptionConfig file has all the desired resources covered 
especially any secrets. 
Remediation: 
Follow the Kubernetes documentation and configure a EncryptionConfig file. Then, edit 
the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml 
on the master node and set the --encryption-provider-config parameter to the path of 
that file: 
--encryption-provider-config=</path/to/EncryptionConfig/File> 
Impact: 
None 
Default Value: 
By default, --encryption-provider-config is not set. 
 
124 | P a g e  
 
References: 
1. https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ 
2. https://acotten.com/post/kube17-security 
3. https://kubernetes.io/docs/admin/kube-apiserver/ 
4. https://github.com/kubernetes/features/issues/92 
CIS Controls: 
Version 6 
 14.5 Encrypt At Rest Sensitive Information 
 Sensitive information stored on systems shall be encrypted at rest and require a 
secondary authentication mechanism, not integrated into the operating system, in order to 
access the information. 
Version 7 
 14.8 Encrypt Sensitive Information at Rest 
 Encrypt all sensitive information at rest using a tool that requires a secondary 
authentication mechanism not integrated into the operating system, in order to access the 
information. 
125 | P a g e  
 
1.2.34 Ensure that encryption providers are appropriately configured 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Where etcd encryption is used, appropriate providers should be configured. 
Rationale: 
Where etcd encryption is used, it is important to ensure that the appropriate set of 
encryption providers is used. Currently, the aescbc, kms and secretbox are likely to be 
appropriate options. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Get the EncryptionConfig file set for --encryption-provider-config argument. Verify 
that aescbc, kms or secretbox is set as the encryption provider for all the desired 
resources. 
Remediation: 
Follow the Kubernetes documentation and configure a EncryptionConfig file. In this file, 
choose aescbc, kms or secretbox as the encryption provider. 
Impact: 
None 
Default Value: 
By default, no encryption provider is set. 
References: 
1. https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/ 
2. https://acotten.com/post/kube17-security 
3. https://kubernetes.io/docs/admin/kube-apiserver/ 
126 | P a g e  
 
4. https://github.com/kubernetes/features/issues/92 
5. https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/#providers 
CIS Controls: 
Version 6 
 14.5 Encrypt At Rest Sensitive Information 
 Sensitive information stored on systems shall be encrypted at rest and require a 
secondary authentication mechanism, not integrated into the operating system, in order to 
access the information. 
Version 7 
 14.8 Encrypt Sensitive Information at Rest 
 Encrypt all sensitive information at rest using a tool that requires a secondary 
authentication mechanism not integrated into the operating system, in order to access the 
information. 
127 | P a g e  
 
1.2.35 Ensure that the API Server only makes use of Strong 
Cryptographic Ciphers (Not Scored) 
Profile Applicability: 
  Level 1 
Description: 
Ensure that the API server is configured to only use strong cryptographic ciphers. 
Rationale: 
TLS ciphers have had a number of known vulnerabilities and weaknesses, which can 
reduce the protection provided by them. By default Kubernetes supports a number of TLS 
ciphersuites including some that have security concerns, weakening the protection 
provided. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-apiserver 
Verify that the --tls-cipher-suites argument is set as outlined in the remediation 
procedure below. 
Remediation: 
Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml 
on the master node and set the below parameter. 
--tls-cipher-
suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM
_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM
_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM
_SHA384 
Impact: 
API server clients that cannot support modern cryptographic ciphers will not be able to 
make connections to the API server. 
Default Value: 
By default the Kubernetes API server supports a wide range of TLS ciphers 
128 | P a g e  
 
References: 
1. https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-
Practices#23-use-secure-cipher-suites 
CIS Controls: 
Version 6 
 3.4 Use Only Secure Channels For Remote System Administration 
 Perform all remote administration of servers, workstation, network devices, and similar 
equipment over secure channels. Protocols such as telnet, VNC, RDP, or others that do not 
actively support strong encryption should only be used if they are performed over a 
secondary encryption channel, such as SSL, TLS or IPSEC. 
Version 7 
 4.5 Use Multifactor Authentication For All Administrative Access 
 Use multi-factor authentication and encrypted channels for all administrative account 
access. 
129 | P a g e  
 
1.3 Controller Manager 
This section contains recommendations relating to Controller Manager configuration flags 
  
130 | P a g e  
 
1.3.1 Ensure that the --terminated-pod-gc-threshold argument is set as 
appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Activate garbage collector on pod termination, as appropriate. 
Rationale: 
Garbage collection is important to ensure sufficient resource availability and avoiding 
degraded performance and availability. In the worst case, the system might crash or just be 
unusable for a long period of time. The current setting for garbage collection is 12,500 
terminated pods which might be too high for your system to sustain. Based on your system 
resources and tests, choose an appropriate threshold value to activate garbage collection. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-controller-manager 
Verify that the --terminated-pod-gc-threshold argument is set as appropriate. 
Remediation: 
Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
controller-manager.yaml on the master node and set the --terminated-pod-gc-
threshold to an appropriate threshold, for example: 
--terminated-pod-gc-threshold=10 
Impact: 
None 
Default Value: 
By default, --terminated-pod-gc-threshold is set to 12500. 
 
131 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-controller-manager/ 
2. https://github.com/kubernetes/kubernetes/issues/28484 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
132 | P a g e  
 
1.3.2 Ensure that the --profiling argument is set to false (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Disable profiling, if not needed. 
Rationale: 
Profiling allows for the identification of specific performance bottlenecks. It generates a 
significant amount of program data that could potentially be exploited to uncover system 
and program details. If you are not experiencing any bottlenecks and do not need the 
profiler for troubleshooting purposes, it is recommended to turn it off to reduce the 
potential attack surface. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-controller-manager 
Verify that the --profiling argument is set to false. 
Remediation: 
Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
controller-manager.yaml on the master node and set the below parameter. 
--profiling=false 
Impact: 
Profiling information would not be available. 
Default Value: 
By default, profiling is enabled. 
References: 
1. https://kubernetes.io/docs/admin/kube-controller-manager/ 
2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi
ling.md 
133 | P a g e  
 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
134 | P a g e  
 
1.3.3 Ensure that the --use-service-account-credentials argument is set 
to true (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Use individual service account credentials for each controller. 
Rationale: 
The controller manager creates a service account per controller in the kube-system 
namespace, generates a credential for it, and builds a dedicated API client with that service 
account credential for each controller loop to use. Setting the --use-service-account-
credentials to true runs each control loop within the controller manager using a separate 
service account credential. When used in combination with RBAC, this ensures that the 
control loops run with the minimum permissions required to perform their intended tasks. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-controller-manager 
Verify that the --use-service-account-credentials argument is set to true. 
Remediation: 
Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
controller-manager.yaml on the master node to set the below parameter. 
--use-service-account-credentials=true 
Impact: 
Whatever authorizer is configured for the cluster, it must grant sufficient permissions to 
the service accounts to perform their intended tasks. When using the RBAC authorizer, 
those roles are created and bound to the appropriate service accounts in the kube-system 
namespace automatically with default roles and rolebindings that are auto-reconciled on 
startup. 
135 | P a g e  
 
If using other authorization methods (ABAC, Webhook, etc), the cluster deployer is 
responsible for granting appropriate permissions to the service accounts (the required 
permissions can be seen by inspecting the controller-roles.yaml and controller-role-
bindings.yaml files for the RBAC roles. 
Default Value: 
By default, --use-service-account-credentials is set to false. 
References: 
1. https://kubernetes.io/docs/admin/kube-controller-manager/ 
2. https://kubernetes.io/docs/admin/service-accounts-admin/ 
3. https://github.com/kubernetes/kubernetes/blob/release-
1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-
roles.yaml 
4. https://github.com/kubernetes/kubernetes/blob/release-
1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-role-
bindings.yaml 
5. https://kubernetes.io/docs/admin/authorization/rbac/#controller-roles 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
136 | P a g e  
 
1.3.4 Ensure that the --service-account-private-key-file argument is set 
as appropriate (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Explicitly set a service account private key file for service accounts on the controller 
manager. 
Rationale: 
To ensure that keys for service account tokens can be rotated as needed, a separate 
public/private key pair should be used for signing service account tokens. The private key 
should be specified to the controller manager with --service-account-private-key-file 
as appropriate. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-controller-manager 
Verify that the --service-account-private-key-file argument is set as appropriate. 
Remediation: 
Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
controller-manager.yaml on the master node and set the --service-account-private-
key-file parameter to the private key file for service accounts. 
--service-account-private-key-file=<filename> 
Impact: 
You would need to securely maintain the key file and rotate the keys based on your 
organization's key rotation policy. 
Default Value: 
By default, --service-account-private-key-file it not set. 
References: 
137 | P a g e  
 
1. https://kubernetes.io/docs/admin/kube-controller-manager/ 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
138 | P a g e  
 
1.3.5 Ensure that the --root-ca-file argument is set as appropriate 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Allow pods to verify the API server's serving certificate before establishing connections. 
Rationale: 
Processes running within pods that need to contact the API server must verify the API 
server's serving certificate. Failing to do so could be a subject to man-in-the-middle attacks. 
Providing the root certificate for the API server's serving certificate to the controller 
manager with the --root-ca-file argument allows the controller manager to inject the 
trusted bundle into pods so that they can verify TLS connections to the API server. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-controller-manager 
Verify that the --root-ca-file argument exists and is set to a certificate bundle file 
containing the root certificate for the API server's serving certificate. 
Remediation: 
Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
controller-manager.yaml on the master node and set the --root-ca-file parameter to 
the certificate bundle file`. 
--root-ca-file=<path/to/file> 
Impact: 
You need to setup and maintain root certificate authority file. 
Default Value: 
By default, --root-ca-file is not set. 
139 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kube-controller-manager/ 
2. https://github.com/kubernetes/kubernetes/issues/11000 
CIS Controls: 
Version 6 
 14.2 Encrypt All Sensitive Information Over Less-trusted Networks 
 All communication of sensitive information over less-trusted networks should be 
encrypted. Whenever information flows over a network with a lower trust level, the 
information should be encrypted. 
Version 7 
 14.4 Encrypt All Sensitive Information in Transit 
 Encrypt all sensitive information in transit. 
140 | P a g e  
 
1.3.6 Ensure that the RotateKubeletServerCertificate argument is set to 
true (Scored) 
Profile Applicability: 
  Level 2 
Description: 
Enable kubelet server certificate rotation on controller-manager. 
Rationale: 
RotateKubeletServerCertificate causes the kubelet to both request a serving certificate 
after bootstrapping its client credentials and rotate the certificate as its existing credentials 
expire. This automated periodic rotation ensures that the there are no downtimes due to 
expired certificates and thus addressing availability in the CIA security triad. 
Note: This recommendation only applies if you let kubelets get their certificates from the 
API server. In case your kubelet certificates come from an outside authority/tool (e.g. 
Vault) then you need to take care of rotation yourself. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-controller-manager 
Verify that RotateKubeletServerCertificate argument exists and is set to true. 
Remediation: 
Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
controller-manager.yaml on the master node and set the --feature-gates parameter to 
include RotateKubeletServerCertificate=true. 
--feature-gates=RotateKubeletServerCertificate=true 
Impact: 
None 
Default Value: 
By default, RotateKubeletServerCertificate is not set. 
141 | P a g e  
 
References: 
1. https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#approval-controller 
2. https://github.com/kubernetes/features/issues/267 
3. https://github.com/kubernetes/kubernetes/pull/45059 
4. https://kubernetes.io/docs/admin/kube-controller-manager/ 
CIS Controls: 
Version 6 
 14.2 Encrypt All Sensitive Information Over Less-trusted Networks 
 All communication of sensitive information over less-trusted networks should be 
encrypted. Whenever information flows over a network with a lower trust level, the 
information should be encrypted. 
Version 7 
 14.4 Encrypt All Sensitive Information in Transit 
 Encrypt all sensitive information in transit. 
142 | P a g e  
 
1.3.7 Ensure that the --bind-address argument is set to 127.0.0.1 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Do not bind the Controller Manager service to non-loopback insecure addresses. 
Rationale: 
The Controller Manager API service which runs on port 10252/TCP by default is used for 
health and metrics information and is available without authentication or encryption. As 
such it should only be bound to a localhost interface, to minimize the cluster's attack 
surface 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-controller-manager 
Verify that the --bind-address argument is set to 127.0.0.1 
Remediation: 
Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-
controller-manager.yaml on the master node and ensure the correct value for the --
bind-address parameter 
Impact: 
None 
Default Value: 
By default, the --bind-address parameter is set to 0.0.0.0 
References: 
1. https://kubernetes.io/docs/reference/command-line-tools-reference/kube-
controller-manager/ 
143 | P a g e  
 
CIS Controls: 
Version 6 
 9.1 Limit Open Ports, Protocols, and Services 
 Ensure that only ports, protocols, and services with validated business needs are running 
on each system. 
Version 7 
 9.2 Ensure Only Approved Ports, Protocols and Services Are Running 
 Ensure that only network ports, protocols, and services listening on a system with 
validated business needs, are running on each system. 
144 | P a g e  
 
1.4 Scheduler 
This section contains recommendations relating to Scheduler configuration flags 
  
145 | P a g e  
 
1.4.1 Ensure that the --profiling argument is set to false (Scored) 
Profile Applicability: 
  Level 1 
Description: 
Disable profiling, if not needed. 
Rationale: 
Profiling allows for the identification of specific performance bottlenecks. It generates a 
significant amount of program data that could potentially be exploited to uncover system 
and program details. If you are not experiencing any bottlenecks and do not need the 
profiler for troubleshooting purposes, it is recommended to turn it off to reduce the 
potential attack surface. 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-scheduler 
Verify that the --profiling argument is set to false. 
Remediation: 
Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-
scheduler.yaml file on the master node and set the below parameter. 
--profiling=false 
Impact: 
Profiling information would not be available. 
Default Value: 
By default, profiling is enabled. 
References: 
1. https://kubernetes.io/docs/admin/kube-scheduler/ 
2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi
ling.md 
146 | P a g e  
 
CIS Controls: 
Version 6 
 14 Controlled Access Based on the Need to Know 
 Controlled Access Based on the Need to Know 
147 | P a g e  
 
1.4.2 Ensure that the --bind-address argument is set to 127.0.0.1 
(Scored) 
Profile Applicability: 
  Level 1 
Description: 
Do not bind the scheduler service to non-loopback insecure addresses. 
Rationale: 
The Scheduler API service which runs on port 10251/TCP by default is used for health and 
metrics information and is available without authentication or encryption. As such it 
should only be bound to a localhost interface, to minimize the cluster's attack surface 
Audit: 
Run the following command on the master node: 
ps -ef | grep kube-scheduler 
Verify that the --bind-address argument is set to 127.0.0.1 
Remediation: 
Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-
scheduler.yaml on the master node and ensure the correct value for the --bind-address 
parameter 
Impact: 
None 
Default Value: 
By default, the --bind-address parameter is set to 0.0.0.0 
References: 
1. https://kubernetes.io/docs/reference/command-line-tools-reference/kube-
scheduler/ 
CIS Controls: 
148 | P a g e  
 
Version 6 
 9.1 Limit Open Ports, Protocols, and Services 
 Ensure that only ports, protocols, and services with validated business needs are running 
on each system. 
Version 7 
 9.2 Ensure Only Approved Ports, Protocols and Services Are Running 
 Ensure that only network ports, protocols, and services listening on a system with 
validated business needs, are running on each system. 
149 | P a g e  
